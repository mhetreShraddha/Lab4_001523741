/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.Color;
import java.awt.Component;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.Encounter;
import model.House;
import model.Patient;
import model.Person;
import model.VitalSigns;

/**
 *
 * @author mhetr
 */
public class AddEncounterPanel extends javax.swing.JPanel {

    City city;
    /**
     * Creates new form AddEncounterPanel
     */
    public AddEncounterPanel(City city) {
        this.city = city;
        initComponents();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPersonDetail1 = new javax.swing.JTable();
        addEncounter = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtName1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtAddressLine = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtAddressLine1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtPincode1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtCommunity1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtCity1 = new javax.swing.JTextField();
        btnSave1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtDoctorName1 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtPulseRate1 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtTemperature1 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtRespirationRate1 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtBloodPressure1 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtAppoinmentDate1 = new javax.swing.JTextField();

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Add Encounter");

        tblPersonDetail1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Address Line 1", "Address Line 1", "Pincode", "Community", "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPersonDetail1);

        addEncounter.setText("Add Encounter");
        addEncounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEncounterActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add doctor appointment");

        jLabel2.setText("Person name: ");

        txtName1.setEditable(false);

        jLabel3.setText("Address Line 1:");

        txtAddressLine.setEditable(false);

        jLabel4.setText("Address Line 2:");

        txtAddressLine1.setEditable(false);

        jLabel5.setText("Pincode:");

        txtPincode1.setEditable(false);

        jLabel6.setText("Community:");

        txtCommunity1.setEditable(false);

        jLabel10.setText("City:");

        txtCity1.setEditable(false);

        btnSave1.setText("Save");
        btnSave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSave1ActionPerformed(evt);
            }
        });

        jLabel8.setText("Doctor Name:");

        jLabel11.setText("Pulse Rate:");

        jLabel12.setText("Temperature:");

        jLabel13.setText("        Respiration Rate:");

        jLabel14.setText("Blood Pressure:");

        jLabel15.setText("Appointment Date:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addEncounter)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10)))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtName1)
                    .addComponent(txtAddressLine1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(txtPincode1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtAddressLine, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCommunity1)
                    .addComponent(txtCity1))
                .addGap(116, 116, 116)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel13)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(42, 42, 42)
                            .addComponent(jLabel8)))
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDoctorName1)
                    .addComponent(txtTemperature1)
                    .addComponent(txtRespirationRate1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPulseRate1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtBloodPressure1)
                    .addComponent(txtAppoinmentDate1, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(82, 82, 82))
            .addGroup(layout.createSequentialGroup()
                .addGap(366, 366, 366)
                .addComponent(btnSave1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addEncounter)
                .addGap(27, 27, 27)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAddressLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAddressLine1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPincode1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCommunity1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCity1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDoctorName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPulseRate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTemperature1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRespirationRate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBloodPressure1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAppoinmentDate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(13, 13, 13)
                .addComponent(btnSave1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSave1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSave1ActionPerformed

        int selectedRow = tblPersonDetail1.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPersonDetail1.getModel();
        Person person = (Person) model.getValueAt(selectedRow, 0);
        VitalSigns vitalSigns = new VitalSigns();
        vitalSigns.setBloodPressure(txtBloodPressure1.getText());
        vitalSigns.setPulseRate(txtPulseRate1.getText());
        vitalSigns.setRespirationRate(txtRespirationRate1.getText());
        vitalSigns.setTemperature(txtTemperature1.getText());
        
        Encounter encounter = new Encounter();
        encounter.setDoctorName(txtDoctorName1.getText());
        encounter.setEncounterDate(txtAppoinmentDate1.getText());
        encounter.setVitalSigns(vitalSigns);
        person.getPatient().getEncounterHistory().addEncounter(encounter);
        JOptionPane.showMessageDialog(this, "Patient Detail added successfully");
        
//        Car car = new Car();
//        car.setAvailable(checkAvailable.isSelected());
//        car.setManufacturer(txtManufacturer.getText());
//        car.setYearOfManufacture(txtYearOfManufacture.getText());
//        car.setNoOfSeats(txtNoOfSeats.getText());
//        car.setSerialNo(txtSerialNo.getText());
//        car.setModelNo(txtModelNo.getText());
//        car.setCity(txtCity.getText());
//        car.setMaintenanceCertExpiration(new Date());
//
//        if(carList.isSerialNoDuplicate(txtSerialNo.getText())) {
//            showMessageDialog(this, "Duplicate serial number found", "Error", ERROR_MESSAGE);
//            return;
//        }
//        carList.addCarDetail(car);
//        JOptionPane.showMessageDialog(this, "Car detail saved successfully");
//        String manufacturer = txtManufacturer.getText();
//        String yearOfManufacture = txtYearOfManufacture.getText();
//        String noOfSeats = txtNoOfSeats.getText();
//        String serialNo = txtSerialNo.getText();
//        String modelNo = txtModelNo.getText();
//        String city = txtCity.getText();
//        String maintenanceCertExpiration = txtCertExpiration.getText();
//
//        if(manufacturer == null || "".equals(manufacturer.trim())) {
//            showMessageDialog(this, "Please enter a valid manufacturer name", "Error", ERROR_MESSAGE);
//        }
//        else if(yearOfManufacture == null || "".equals(yearOfManufacture.trim())
//            || !Pattern.matches("^[0-9]{4}$", yearOfManufacture.trim())) {
//            showMessageDialog(this, "Please enter a valid year of manufacture", "Error", ERROR_MESSAGE);
//        }
//        else if(noOfSeats == null || "".equals(noOfSeats.trim()) || !Pattern.matches("^[0-9]{1,3}$", noOfSeats.trim())) {
//            showMessageDialog(this, "Please enter a valid no of seats", "Error", ERROR_MESSAGE);
//        }
//        else if(serialNo == null || "".equals(serialNo.trim())) {
//            showMessageDialog(this, "Please enter a valid serial no", "Error", ERROR_MESSAGE);
//        }
//        else if(modelNo == null || "".equals(modelNo.trim())) {
//            showMessageDialog(this, "Please enter a valid model no", "Error", ERROR_MESSAGE);
//        }
//        else if(city == null || "".equals(city.trim())) {
//            showMessageDialog(this, "Please enter a valid city name", "Error", ERROR_MESSAGE);
//        }
//        else if(maintenanceCertExpiration == null || "".equals(maintenanceCertExpiration.trim())
//            || !isValidDate("MM/dd/yyyy", maintenanceCertExpiration.trim())) {
//            showMessageDialog(this, "Please enter a valid expiration date", "Error", ERROR_MESSAGE);
//        }
//        else {
//            Car car = new Car();
//            car.setAvailable(checkAvailable.isSelected());
//            car.setManufacturer(txtManufacturer.getText());
//            car.setYearOfManufacture(txtYearOfManufacture.getText());
//            car.setNoOfSeats(txtNoOfSeats.getText());
//            car.setSerialNo(txtSerialNo.getText());
//            car.setModelNo(txtModelNo.getText());
//            car.setCity(txtCity.getText());
//            car.setMaintenanceCertExpiration(new Date());
//
//            if(carList.isSerialNoDuplicate(txtSerialNo.getText())) {
//                showMessageDialog(this, "Duplicate serial number found", "Error", ERROR_MESSAGE);
//                return;
//            }
//            carList.addCarDetail(car);
//            JOptionPane.showMessageDialog(this, "Car detail saved successfully");
//        }
    }//GEN-LAST:event_btnSave1ActionPerformed

    private void addEncounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEncounterActionPerformed
        int selectedRow = tblPersonDetail1.getSelectedRow();
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to add doctor's appoinment detail", "Error", ERROR_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblPersonDetail1.getModel();
        Person person = (Person) model.getValueAt(selectedRow, 0);
        House house = (House) model.getValueAt(selectedRow, 2);
        Community community = (Community) model.getValueAt(selectedRow, 5);
        City City = (City) model.getValueAt(selectedRow, 6);
        txtName1.setText(person.toString());
        txtAddressLine.setText(house.getAddressLine1());
        txtAddressLine1.setText(house.getAddressLine2());
        txtPincode1.setText(house.getPincode());
        txtCommunity1.setText(community.getCommunityName());
        txtCity1.setText(city.getCityName());
        
    }//GEN-LAST:event_addEncounterActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEncounter;
    private javax.swing.JButton btnSave1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPersonDetail1;
    private javax.swing.JTextField txtAddressLine;
    private javax.swing.JTextField txtAddressLine1;
    private javax.swing.JTextField txtAppoinmentDate1;
    private javax.swing.JTextField txtBloodPressure1;
    private javax.swing.JTextField txtCity1;
    private javax.swing.JTextField txtCommunity1;
    private javax.swing.JTextField txtDoctorName1;
    private javax.swing.JTextField txtName1;
    private javax.swing.JTextField txtPincode1;
    private javax.swing.JTextField txtPulseRate1;
    private javax.swing.JTextField txtRespirationRate1;
    private javax.swing.JTextField txtTemperature1;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblPersonDetail1.getModel();
        model.setRowCount(0);
        
        for(Community community : city.getCommunityList())
        {
            Object[] row = new Object[7];
            row[6] = city;
            row[5] = community;
            for(House house : community.getHouseList())
            {
                row[2] = house;
                row[3] = house.getAddressLine2();
                row[4] = house.getPincode();
                for(Person person : house.getPersonList())
                {
                    row[0] = person;
                    row[1] = person.getAge();
                    model.addRow(row);
                }
            }
        }
//        tblPersonDetail.setDefaultRenderer(Object.class, new DefaultTableCellRenderer()
//        {
//            @Override
//            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
//            {
//                
//                Car car = (Car)table.getModel().getValueAt(row, 0);
//                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
//                c.setBackground(car.isAvailable()? Color.LIGHT_GRAY: Color.RED);
//                return c;
//            }
//        });
    }
}
